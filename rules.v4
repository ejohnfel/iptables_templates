*filter

#########################
# Example IPTABLES/Netfilter Firewall Rule Template
# By Eric Johnfelt (9/8/2022, but based on previous work from/since 2014)
#########################

#########################
# IMPORTANT : This rules file defaults INPUT to ACCEPT, this means, and requires, DENY/REJECT rules to prevent access to things
# The logic here is ACCEPT certain things early, then outright deny everything else at the tail end of the chains
#########################
:INPUT ACCEPT [14935:1868599]
:FORWARD ACCEPT [0:0]
:OUTPUT ACCEPT [14771:1882538]

# General Logic of this example:
# INPUT->Allows Everything, but then calls Prebanned, Prebanned then calls Allowed and Allowed called Postbanned
# Or... INPUT->Prebanned,Prebanned->Allowed,Allowed->Postbanned,End of processing

# Define the Chains
#########################
# Prebanned : Since we defaulted to ACCEPT on INPUT, anything that you want denyed from the start, should be in this chain
# Don't be afraid to also inlcude blanket ACCEPT rules here to, or, if more convenient and logical, put them in INPUT before
# the jump to this chain
#########################
:Prebanned - [0:0]
#########################
# Allowed : Explicit Allows
#########################
:Allowed - [0:0]
#########################
# Post Banned : Ban anything that you want denied that may have passed through Allowed. Here we place the broader DENY rules
#########################
:Postbanned - [0:0]

# Now Define each Chain's Rules

##########################
# Default INPUT Chain and Required/sensible Rules
##########################
-A INPUT -m state --state RELATED,ESTABLISHED -j ACCEPT
-A INPUT -i lo -j ACCEPT

##########################
# Pre (Allowed) Banned Rules - Jump to first
##########################
# Used to explicitly ban IP's/networks before hitting the allowed section or combinations of specific allow-then-preban if the logic requires it
# ATM This chain only called Allowed, but you would add rules to deny just before the jump rule.
# There is no need for a return rule here since one Prebanned and all the other finish, it will stop processing. You can add a return IF you want
# to continue processing more rules in INPUT for any reason.
-A Prebanned -j Allowed

##########################
# Post (Allowed) Banned Rules - Jumped to by INPUT after Prebanned is processed
##########################
# Reject anything that made it passed prebanned and allowed already
# ATM, this is a simple rule that says, if you are not in the source network 192.168.0.0/16, just tell everyone I don't exist
-A Postbanned ! -s 192.168.0.0/16 -j REJECT --reject-with icmp-host-unreachable

# It is important to note here, there are no specific denies in this example, if you have some you would want to place then here.
# The reason the reject statement is here, is that this is advisable to tell everyone we don't exist. If they have no business talking
# talk to you... why should they known you exist. But you could easily replace the reject rule with broader denials, but this WILL tell querying
# hosts that you do.. in fact... exist... despite being denied. And if you don't include the appropriate denials (or rejects), a packet you do not
# intend to make it through the firewall, may just end up getting to it's intended destination. Firewall rules can be tricky this way. The blanket
# reject rule prevents this. In this example, since we already allow 192.168.0.0/16 as a network on all ports, we can safely exempt that private
# network from getting a "that host is not there" message. This is useful if you want hosts on 192.168.0.0/16 (or whatever target subnet) to be able to
# ICMP or protocol ping over this firewall for diagnostics.
#
# Best practice is also, once you put the firewall rules in place to test the denial rules from hosts that they should be working from to ensure they
# are working. We recommend using the 'nping' tool from Nmap for this kind of diagnostic testing.

# Return to Allowed
-A Postbanned -j RETURN

##########################
# Tell Input we go here first
##########################
-A INPUT -j Prebanned

##########################
# Allowed Rules - Jumped to from Prebanned
##########################
# Allowed Networks

# IANA Private Ranges
# IANA Private 10/8
-A Allowed -s 10.0.0.0/8 -j ACCEPT
# IANA Private 192.168/16
-A Allowed -s 192.168.0.0/16 -j ACCEPT
# IANA Private 172.16/12
-A Allowed -s 172.16.0.0/12 -j ACCEPT

#
# IP Block ACLs
#

# Lighsail - All this Amazon Lightsail VM to talk to this host on all ports.
-A Allowed -s 107.21.174.32 -j ACCEPT

# Allowed Ports - Let ANY host talk to SSH
-A Allowed -p tcp -m tcp --dport 22 -j ACCEPT

# Multiport Example - Let given host talk only to the the listed ports
-A Allowed -s 45.77.200.160 -p tcp --match multiport --dports 22,80,443,3128 -j ACCEPT

# Examples

# Squid Proxy
# -A Allowed -p tcp -m tcp --dport 3128 -j ACCEPT
# HTTP/HTTPs
# -A Allowed -p tcp -m tcp --dport 80 -j ACCEPT
# -A Allowed -p tcp -m tcp --dport 443 -j ACCEPT

# TCP and UDP Examples
# -A Allowed -p tcp -m tcp --dport 1514 -j ACCEPT
# -A Allowed -p udp -m udp --dport 1514 -j ACCEPT

# Tell netfilter/iptables where to go next
-A Allowed -j Postbanned
# Return to Prebanned
-A Allowed -j RETURN

COMMIT
# Completed on Sun Dec 20 23:27:48 2015
